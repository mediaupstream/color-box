{"version":3,"sources":["Menu.js","App.js","serviceWorker.js","index.js"],"names":["Heading","styled","H","_templateObject","ColorBox","_ref","label","colors","props","Object","objectWithoutProperties","react_default","a","createElement","assign","fontFamily","py","px","width","children","style","color","background","Menu","_ref2","theme","dist","zIndex","my","Menu_ColorBox","base","ch","ColorHash","Bloop","Box","App_templateObject","Input","_templateObject2","defaultProps","as","autoComplete","autoCorrect","autoCapitalize","spellCheck","autoFocus","Container","_templateObject3","App","_useState","useState","_useState2","slicedToArray","value","setValue","palette","hex","ts","split","map","i","codePointAt","reduce","react","transform","concat","p","pt","src_Menu","border","onChange","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yYASA,IAAMA,EAAUC,kBAAOC,UAAPD,CAAHE,KAUPC,EAAW,SAAAC,GAA+B,IAA7BC,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,OAAWC,EAAWC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,oBAC9C,OACEM,EAAAC,EAAAC,cAACb,EAADS,OAAAK,OAAA,CACEC,WAAW,YACXC,GAAI,CAAC,GAAG,IACRC,GAAI,CAAC,IACLC,MAAO,CAAC,GAAI,KACZC,SAAUb,EACVc,MAAO,CACLC,MAAOd,EAAO,GACde,WAAYf,EAAO,KAEjBC,KAmBKe,EAVF,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,MAAqBhB,OAAAC,EAAA,EAAAD,CAAAe,EAAA,WAClC,OACEb,EAAAC,EAAAC,cAACa,EAAA,KAAD,CAAMN,MAAO,CAACO,OAAO,GAAIC,GAAI,CAAC,EAAE,KAC9BjB,EAAAC,EAAAC,cAACgB,EAAD,CAAUvB,MAAOmB,EAAMJ,MAAOd,OAAQ,CAACkB,EAAMJ,MAAOI,EAAMK,QAC1DnB,EAAAC,EAAAC,cAACgB,EAAD,CAAUvB,MAAOmB,EAAMK,KAAMvB,OAAQ,CAACkB,EAAMK,KAAML,EAAMJ,SACxDV,EAAAC,EAAAC,cAACa,EAAA,IAAD,CAAKR,MAAO,CAAC,EAAG,upBCnCf,IAYDa,EAAK,IAAIC,IAOTC,EAAQhC,kBAAOiC,MAAPjC,CAAHkC,KAkBLC,EAAQnC,kBAAOiC,MAAPjC,CAAHoC,KAgBXD,EAAME,aAAe,CACnBC,GAAG,WACHC,aAAc,MACdC,YAAa,MACbC,eAAgB,MAChBC,YAAY,EACZC,WAAW,GAQb,IAAMC,EAAY5C,kBAAOiC,MAAPjC,CAAH6C,KA6CAC,EApCH,WAAM,IAAAC,EAEUC,mBA9EC,eA4EXC,EAAAzC,OAAA0C,EAAA,EAAA1C,CAAAuC,EAAA,GAETI,EAFSF,EAAA,GAEFG,EAFEH,EAAA,GAIVzB,EAAQ6B,IAAQvB,EAAGwB,IAAIH,IACvBI,EAAYJ,EA1EEK,MAAM,IAAIC,IAAI,SAAAC,GAAC,OAAIA,EAAEC,YAAY,KAAIC,OAAO,SAACF,EAAG/C,GAAJ,OAAU+C,EAAE/C,GAAG,GA4E/E,OACED,EAAAC,EAAAC,cAACiD,EAAA,SAAD,KACEnD,EAAAC,EAAAC,cAACoB,EAAD,CAAOb,MAAO,CACZ2C,UAAS,UAAAC,OAAYR,EAAG,IAAf,cAAAQ,OAAgCR,EAAG,EAAG,IAAtC,WAEX7C,EAAAC,EAAAC,cAACgC,EAAD,CACEzB,MAAO,CACLE,WAAWG,EAAMK,MAEnBmC,EAAG,CAAC,EAAG,IACPC,GAAI,CAAC,EAAG,IAERvD,EAAAC,EAAAC,cAACsD,EAAD,CAAM1C,MAAOA,IACbd,EAAAC,EAAAC,cAACuB,EAAD,CACEgB,MAAOA,EACPa,EAAG,CAAC,EAAG,IACP7C,MAAO,CACLgD,OAAM,cAAAJ,OAAgBvC,EAAMJ,OAC5BA,MAAOI,EAAMJ,OAEfgD,SAAU,SAAAhE,GAAgB,IAAbiE,EAAajE,EAAbiE,OACXjB,EAASiB,EAAOlB,aCtGRmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlE,EAAAC,EAAAC,cAACiE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.eedbbd35.chunk.js","sourcesContent":["import React from 'react'\nimport { Flex, Box, Heading as H } from \"rebass\"\nimport styled from 'styled-components'\n\n/**\n * Heading\n * adds a transition rule\n * @returns Heading\n */\nconst Heading = styled(H)`\n  text-align:center;\n  transition: all 0.13s linear;\n`\n\n/**\n * ColorBox\n * Display heading with defaults. Adds color to the box\n * @param {object} props\n */\nconst ColorBox = ({label, colors, ...props}) => {\n  return (\n    <Heading\n      fontFamily='monospace'\n      py={[20,25]}\n      px={[20]}\n      width={[1/2,1/4]}\n      children={label}\n      style={{\n        color: colors[1],\n        background: colors[0],\n      }}\n      {...props}\n    />\n  )\n}\n\n/**\n * Displays a menu with info about the current `theme`\n * @param {object} props\n */\nconst Menu = ({theme, ...props}) => {\n  return (\n    <Flex style={{zIndex:9}} my={[0,10]}>\n      <ColorBox label={theme.color} colors={[theme.color, theme.base]} />\n      <ColorBox label={theme.base} colors={[theme.base, theme.color]} />\n      <Box width={[0, 1]}/>\n    </Flex>\n  )\n}\n\nexport default Menu\n","import React, { useState, Fragment } from 'react'\nimport { Box } from \"rebass\"\nimport ColorHash from \"color-hash\"\nimport palette from 'hello-color'\nimport styled from 'styled-components'\nimport Menu from './Menu'\n\n/**\n * Initial state value\n */\nexport const INITIAL_VALUE = 'type things'\n\n/**\n * Sums the code point values for each character in `n`\n * @param {string} n a string value\n * @returns {number} the sum\n */\nconst sumStr = n => n.split('').map(i => i.codePointAt(0)).reduce((i, a) => i+a, 0)\n\n/**\n * ColorHash instance\n */\nconst ch = new ColorHash()\n\n/**\n * Bloop\n * A bloopy box, for aesthetic purposes only\n * @returns Bloop\n */\nconst Bloop = styled(Box)`\n  position:fixed;\n  top:0;\n  left:0;\n  right:0;\n  bottom:0;\n  background:white;\n  z-index:7;\n  transition: transform 0.13s linear;\n  pointer-events:none;\n`\n\n/**\n * Input\n * this input is actually going to be\n * a textarea\n * @returns Input\n */\nconst Input = styled(Box)`\n  z-index:9;\n  flex:1;\n  background:transparent;\n  font-size:5rem;\n  font-family:'Helvetica Neue', Helvetica, sans-serif;\n  font-weight:bold;\n  transition: border 0.13s linear;\n  &:hover {\n    border-size:2rem;\n  }\n`\n/**\n * Input default props\n * see, it's a textarea...\n */\nInput.defaultProps = {\n  as:'textarea',\n  autoComplete: \"off\",\n  autoCorrect: \"off\",\n  autoCapitalize: \"off\",\n  spellCheck: false,\n  autoFocus: true,\n}\n\n/**\n * Container\n * A flexbox container\n * @returns Container\n */\nconst Container = styled(Box)`\n  display: flex;\n  flex:1;\n  flex-direction:column;\n`\n\n/**\n * Displays the app, uses state hooks\n */\nconst App = () => {\n  // Hooks\n  const [value, setValue] = useState(INITIAL_VALUE)\n  // Generate a color theme from the value in state\n  const theme = palette(ch.hex(value))\n  const ts = sumStr(value)\n\n  return (\n    <Fragment>\n      <Bloop style={{\n        transform: `rotate(${ts%360}deg) skew(${(ts/4)%360}deg)`\n      }}/>\n      <Container\n        style={{\n          background:theme.base\n        }}\n        p={[0, 80]}\n        pt={[0, 0]}\n        >\n        <Menu theme={theme} />\n        <Input\n          value={value}\n          p={[3, 20]}\n          style={{\n            border: `1rem solid ${theme.color}`,\n            color: theme.color,\n          }}\n          onChange={({ target }) => {\n            setValue(target.value)\n          }}\n          />\n      </Container>\n    </Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}